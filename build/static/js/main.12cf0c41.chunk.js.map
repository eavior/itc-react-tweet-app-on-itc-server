{"version":3,"sources":["context.js","components/TweetForm.jsx","components/TweetItem.jsx","components/TweetList.jsx","lib/api.js","components/Profile.jsx","App.js","reportWebVitals.js","index.js"],"names":["MyContext","createContext","serverTweets","error","currentUser","onAddTweet","TweetForm","props","state","value","id","tweetText","date","userName","charactersLeft","maxTweetLengthWarning","maxTweetLengthReached","arrayOfTweets","loading","item","event","this","setState","target","length","preventDefault","setTimeout","Date","now","content","toISOString","afterSubmit","Consumer","className","onSubmit","handleSubmit","name","rows","placeholder","onChange","handleChange","role","aria-hidden","href","React","Component","TweetItem","TweetList","tweets","map","BaseUrl","getTweets","a","axios","get","response","data","createTweet","post","errorMessage","JSON","stringify","text","String","Profile","currentUserName","updatedUserName","redirect","prevState","newUserName","onChangeUser","alert","to","type","NavBar","exact","activeClassName","App","localStorage","getItem","addNewTweet","loadServerTweets","interval","setInterval","clearInterval","newTweet","includes","removeItem","setItem","serverTweetsImport","sort","b","Provider","path","user","setUserName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12cf0c41.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const MyContext = createContext({\n  serverTweets: [],\n  error: \"\",\n  currentUser: \"\",\n  onAddTweet: () => { }\n});","import React from \"react\";\nimport { MyContext } from '../context';\n\nexport default class TweetForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: \"\",\n            id: \"\",\n            tweetText: \"\",\n            date: \"\",\n            userName: \"\",\n            charactersLeft: 0,\n            maxTweetLengthWarning: false,\n            maxTweetLengthReached: false,\n            arrayOfTweets: [],\n            loading: false,\n        };\n        this.item = {};\n    }\n\n    handleChange(event) {\n        this.setState({ tweetText: event.target.value });\n        const value = event.target.value;\n        this.setState({ charactersLeft: (value.length - 140) * -1, maxTweetLengthWarning: (value.length > 99) ? true : false, maxTweetLengthReached: (value.length > 140) ? true : false });\n    }\n\n    handleSubmit(event, currentUser, onAddTweet) {\n        event.preventDefault();\n        this.setState({ loading: true });\n        setTimeout(() => {\n            if (!this.state.tweetText) return;\n            const item = { id: Date.now(), content: this.state.tweetText, userName: currentUser, date: new Date().toISOString() };\n            onAddTweet(item);\n            this.setState({\n                value: \"\",\n                id: \"\",\n                tweetText: \"\",\n                date: \"\",\n                maxTweetLengthWarning: false,\n            });\n            this.afterSubmit();\n        }, 1000);\n    }\n\n    afterSubmit() {\n        this.setState({ loading: false });\n    }\n\n    render() {\n        return (\n            <MyContext.Consumer>\n                {({ error, currentUser, onAddTweet }) => (\n                    <div className=\"tweetForm\">\n                        <form className=\"card\" onSubmit={event => this.handleSubmit(event, currentUser, onAddTweet)}>\n                            <div className=\"card-body\">\n                                <textarea\n                                    className=\"form-control\"\n                                    name=\"text\"\n                                    rows=\"3\"\n                                    placeholder=\"What you have in mind...\"\n                                    value={this.state.tweetText}\n                                    onChange={(event) => this.handleChange(event)}\n                                ></textarea>\n                            </div>\n                            <div className=\"card-body form-footer\">\n                                {this.state.maxTweetLengthWarning && !this.state.maxTweetLengthReached && <div className=\"float-start\">{this.state.charactersLeft} characters left.</div>}\n                                <div className=\"float-end\">\n                                    {!this.state.tweetText && <button className=\"btn btn-primary disabled\">Tweet</button>}\n                                    {this.state.tweetText && this.state.maxTweetLengthReached && !this.state.loading && <button className=\"btn btn-primary disabled\">Tweet</button>}\n                                    {this.state.tweetText && !this.state.maxTweetLengthReached && !this.state.loading && <button className=\"btn btn-primary\">Tweet</button>}\n                                    {this.state.tweetText && this.state.loading && <button className=\"btn btn-primary disabled\"><span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Loading ...</button>}\n                                </div>\n                            </div>\n                        </form>\n                        {this.state.maxTweetLengthReached && <div className=\"alert alert-danger\" role=\"alert\">The tweet can't contain more than 140 chars.</div>}\n                        {error && <div className=\"alert alert-danger\" role=\"alert\">{error}</div>}\n                        {currentUser === 'Anonymous user' && <div className=\"alert alert-warning\" role=\"alert\">You are currently logged in as 'Anonymous user'. Please change your user name in the <a href=\"/profile\">profile</a> section.</div>}\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n","import React from \"react\";\n\nconst TweetItem = (props) => {\n    const { item } = props;\n    return (\n        <div className=\"card tweet\">\n            <div className=\"card-body tweet-header\">\n                <div className=\"float-start\">{item.userName}</div>\n                <div className=\"float-end\">{item.date}</div>\n            </div>\n            <div className=\"card-body tweet-body\">\n                <p className=\"card-text tweet-text\">{item.content}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default TweetItem;","import React from \"react\";\nimport TweetItem from \"./TweetItem\";\nimport { MyContext } from '../context';\n\nexport default class TweetList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tweets: [],\n            loading: false,\n        };\n    }\n\n    render() {\n        return (\n            <MyContext.Consumer>\n                {({ serverTweets }) => (\n                    <div className=\"container\" >\n                        {serverTweets.map((item) =>\n                            <TweetItem\n                                key={item.date} // or ID. In this case 'Date' because someone else may not have included an ID key in a server tweet.\n                                item={item}\n                            />\n                        )}\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","import axios from 'axios';\n\nconst BaseUrl = 'https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet';\n\nexport async function getTweets() {\n  const response = await axios.get(`${BaseUrl}`);\n  return response.data.tweets;\n}\n\nexport async function createTweet(item) {\n  try {\n    const response = await axios.post(`${BaseUrl}`, item);\n    return response.data;\n  } catch (error) {\n    const errorMessage = `Oops! Something went wrong. ${JSON.stringify(error.response.text)}`;\n    return String(errorMessage);\n  }\n}\n","import React from \"react\";\nimport { Redirect } from \"react-router\";\n\nexport default class Profile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            currentUserName: \"\",\n            updatedUserName: \"\",\n            redirect: null,\n        };\n    }\n\n    componentDidMount() {\n        this.setState(prevState => {\n            return { currentUserName: this.props.currentUser, updatedUserName: this.props.currentUser, value: this.props.currentUser, redirect: null };\n        });\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value, updatedUserName: event.target.value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const newUserName = this.state.updatedUserName;\n        this.props.onChangeUser(newUserName);\n        alert(\"The user name has been succesfully changed to \" + newUserName);\n        this.setState(prevState => {\n            return { value: newUserName, redirect: \"/\" };\n        });\n    }\n\n    render() {\n        if (this.state.redirect) {\n            return <Redirect to={this.state.redirect} />\n        }\n        return (\n            <div className=\"container text-white profile\">\n                <h2>Profile</h2>\n                <h3>User Name</h3>\n                <form className=\"card-profile\" onSubmit={event => this.handleSubmit(event)}>\n                    <div className=\"card-body-profile\">\n                        <input\n                            className=\"form-control\"\n                            name=\"text\"\n                            type=\"text\"\n                            rows=\"1\"\n                            value={this.state.value}\n                            onChange={(event) => this.handleChange(event)}\n                        />\n                    </div>\n                    <div className=\"card-body tweet-header\">\n                        <div className=\"float-end\">\n                            {this.state.updatedUserName !== this.state.currentUserName && <button className=\"btn btn-primary\">Save</button>}\n                            {this.state.updatedUserName === this.state.currentUserName && <button className=\"btn btn-primary disabled\">Save</button>}\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport TweetForm from './components/TweetForm';\nimport TweetList from './components/TweetList';\nimport { getTweets, createTweet } from './lib/api';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    NavLink\n} from \"react-router-dom\";\nimport Profile from './components/Profile';\nimport { MyContext } from './context';\n\nconst NavBar = () => {\n    return (\n        <nav className=\"container navbar navbar-expand fixed-top\">\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                <div className=\"navbar-nav\">\n                    <NavLink className=\"nav-link\" exact activeClassName=\"selected\" to=\"/\">Home</NavLink>\n                    <NavLink className=\"nav-link\" activeClassName=\"selected\" to=\"/profile\">Profile</NavLink>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            serverTweets: [],\n            error: \"\",\n            loading: false,\n            currentUser: localStorage.getItem('currentUser') || \"Anonymous user\",\n            onAddTweet: (item) => this.addNewTweet(item),\n        }\n    }\n\n    componentDidMount() {\n        // localStorage.clear(); // In order to reset the localStorage. Comment out if not applicable.\n        this.setState(prevState => {\n            return { error: \"\" };\n        });\n        this.loadServerTweets();\n        this.interval = setInterval(() => this.loadServerTweets(), 15000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    async addNewTweet(item) {\n        const newTweet = await createTweet(item);\n        if (typeof newTweet === 'string') {\n            if (newTweet.includes('Oops! Something went wrong.')) {\n                this.setState(prevState => {\n                    return { error: newTweet };\n                });\n            }\n        }\n        else {\n            this.setState(prevState => {\n                return { serverTweets: [item, ...prevState.serverTweets] };\n            });\n        }\n    }\n\n    setUserName(currentUser) {\n        localStorage.removeItem('currentUser');\n        localStorage.setItem('currentUser', currentUser)\n        this.setState(prevState => {\n            return { currentUser: currentUser };\n        });\n    }\n\n    async loadServerTweets() {\n        // this.setState({ loading: true }); // show error if tweet list cannot be loaded; not requested in the assignment; can be added later\n        const serverTweetsImport = await getTweets();\n        // this.setState({ tweets, loading: false });\n        serverTweetsImport.sort((a, b) => (b.date > a.date) ? 1 : -1);\n        this.setState(prevState => {\n            return { serverTweets: [] }; // Somehow, if the list is not emptied first, the screen will continue to show the local list.\n        });\n        this.setState(prevState => {\n            return { loading: false, serverTweets: serverTweetsImport };\n        });\n    }\n\n    render() {\n        return (\n            <MyContext.Provider value={this.state}>\n                <Router>\n                    <NavBar />\n                    <div className=\"container\">\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <TweetForm />\n                                {this.state.serverTweets.length && <TweetList />}\n                            </Route>\n                            <Route path=\"/profile\">\n                                <Profile currentUser={this.state.currentUser} onChangeUser={(user) => this.setUserName(user)}></Profile>\n                            </Route>\n                        </Switch>\n                    </div>\n                </Router>\n            </MyContext.Provider>\n        )\n    }\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}